
Lab2_2.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000086a  000008fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000086a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800122  00800122  00000920  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000097c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000091f  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000078a  00000000  00000000  0000132b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000392  00000000  00000000  00001ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000415  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019a  00000000  00000000  0000232d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000024c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 33       	cpi	r26, 0x34	; 52
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  9e:	0c 94 33 04 	jmp	0x866	; 0x866 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:
void uart_init(void);

static FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
static FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

int uart_putchar(char c, FILE *stream) {
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
	if (c == '\n') {
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <uart_putchar+0xe>
		uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	85 ff       	sbrs	r24, 5
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <uart_putchar+0x12>
	UDR0 = c;
  be:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <uart_getchar>:

int uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
  ca:	e0 ec       	ldi	r30, 0xC0	; 192
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	ec f7       	brge	.-6      	; 0xce <uart_getchar+0x4>
	return UDR0;
  d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	08 95       	ret

000000dc <uart_init>:

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
  dc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
  e0:	87 e6       	ldi	r24, 0x67	; 103
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
  e6:	e0 ec       	ldi	r30, 0xC0	; 192
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	8d 7f       	andi	r24, 0xFD	; 253
  ee:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    // Redirect stdin and stdout so functions like printf and getchar work.
	stdout = &uart_output;
  fc:	ee e2       	ldi	r30, 0x2E	; 46
  fe:	f1 e0       	ldi	r31, 0x01	; 1
 100:	8e e0       	ldi	r24, 0x0E	; 14
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	93 83       	std	Z+3, r25	; 0x03
 106:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	91 83       	std	Z+1, r25	; 0x01
 10e:	80 83       	st	Z, r24
 110:	08 95       	ret

00000112 <output_length>:
	}
}

void output_length(void){
	
	if (value2 < value1){overflow--;} // get rid of extra flow count if value2 < value1 
 112:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <value2>
 116:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <value2+0x1>
 11a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <value1>
 11e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <value1+0x1>
 122:	28 17       	cp	r18, r24
 124:	39 07       	cpc	r19, r25
 126:	48 f4       	brcc	.+18     	; 0x13a <output_length+0x28>
 128:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <overflow>
 12c:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <overflow+0x1>
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <overflow+0x1>
 136:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <overflow>
	
	diff = value2 - value1;
 13a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <value2>
 13e:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <value2+0x1>
 142:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <value1>
 146:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <value1+0x1>
 14a:	82 1b       	sub	r24, r18
 14c:	93 0b       	sbc	r25, r19
 14e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <diff+0x1>
 152:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <diff>
	
	pulse_width = (int)overflow * 65536u + (int)diff;
 156:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <overflow>
 15a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <overflow+0x1>
 15e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <diff>
 162:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <diff+0x1>
 166:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__data_end+0x1>
 16a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
	
	if (pulse_width!=0){
 16e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 172:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
 176:	89 2b       	or	r24, r25
 178:	99 f0       	breq	.+38     	; 0x1a0 <output_length+0x8e>
		printf("%d \n",-pulse_width); // print to serial
 17a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 17e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
 182:	91 95       	neg	r25
 184:	81 95       	neg	r24
 186:	91 09       	sbc	r25, r1
 188:	9f 93       	push	r25
 18a:	8f 93       	push	r24
 18c:	8c e1       	ldi	r24, 0x1C	; 28
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	9f 93       	push	r25
 192:	8f 93       	push	r24
 194:	0e 94 55 01 	call	0x2aa	; 0x2aa <printf>
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	08 95       	ret

000001a2 <main>:
volatile unsigned int pulse_width =0;
void output_length();

int main(void)
{
	uart_init();	// init UART
 1a2:	0e 94 6e 00 	call	0xdc	; 0xdc <uart_init>
	
	DDRB = 0x00;	// init PORTB to be all inputs
 1a6:	14 b8       	out	0x04, r1	; 4
	DDRC = 0xFF;	// init PORTC to be all outputs
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFF;	// init PORTD to be all outputs
 1ac:	8a b9       	out	0x0a, r24	; 10
	
	TCCR1A = 0x00;	// init High byte to zero
 1ae:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0x00;  // init Mid byte to zero
 1b2:	e1 e8       	ldi	r30, 0x81	; 129
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	10 82       	st	Z, r1
	TCCR1C = 0x00;	// init Low byte to zero
 1b8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	
	DDRB  |=  (1<<PORTB1);	// enable PB1 to be output channel
 1bc:	21 9a       	sbi	0x04, 1	; 4
	DDRB  &= ~(1<<PORTB2);	// enable PB2 to be input channel
 1be:	22 98       	cbi	0x04, 2	; 4
	PORTB |=  (1<<PORTB1) | (1<<PORTB2);// change PB1 PB2 to high
 1c0:	85 b1       	in	r24, 0x05	; 5
 1c2:	86 60       	ori	r24, 0x06	; 6
 1c4:	85 b9       	out	0x05, r24	; 5

	TIMSK1 |= (1<<ICIE1) | (1<<TOIE1);  // set overflow interrupt 
 1c6:	af e6       	ldi	r26, 0x6F	; 111
 1c8:	b0 e0       	ldi	r27, 0x00	; 0
 1ca:	8c 91       	ld	r24, X
 1cc:	81 62       	ori	r24, 0x21	; 33
 1ce:	8c 93       	st	X, r24
	TCCR1B |= (1<<CS11 ) | (1<<ICES1);	// set clock prescale to 8 and enable rising edge capture
 1d0:	80 81       	ld	r24, Z
 1d2:	82 64       	ori	r24, 0x42	; 66
 1d4:	80 83       	st	Z, r24
	
	TCNT1 = 0;	// reset Counter 1
 1d6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1da:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	sei();		// enable interrupt
 1de:	78 94       	sei
	
	while (1)
	{
		if (TCNT1>= 9){		// counts 9 times to obtain 100kHz
 1e0:	c4 e8       	ldi	r28, 0x84	; 132
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
			PORTB ^= (1<<PORTB1);
 1e4:	12 e0       	ldi	r17, 0x02	; 2
	TCNT1 = 0;	// reset Counter 1
	sei();		// enable interrupt
	
	while (1)
	{
		if (TCNT1>= 9){		// counts 9 times to obtain 100kHz
 1e6:	88 81       	ld	r24, Y
 1e8:	99 81       	ldd	r25, Y+1	; 0x01
 1ea:	09 97       	sbiw	r24, 0x09	; 9
 1ec:	28 f0       	brcs	.+10     	; 0x1f8 <main+0x56>
			PORTB ^= (1<<PORTB1);
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	81 27       	eor	r24, r17
 1f2:	85 b9       	out	0x05, r24	; 5
			TCNT1 = 0;
 1f4:	19 82       	std	Y+1, r1	; 0x01
 1f6:	18 82       	st	Y, r1
			}
		output_length();	
 1f8:	0e 94 89 00 	call	0x112	; 0x112 <output_length>
	}
 1fc:	f4 cf       	rjmp	.-24     	; 0x1e6 <main+0x44>

000001fe <__vector_10>:
	if (pulse_width!=0){
		printf("%d \n",-pulse_width); // print to serial
	}
}

ISR(TIMER1_CAPT_vect){
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	ef 93       	push	r30
 20e:	ff 93       	push	r31
	if (flag){
 210:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <flag>
 214:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <flag+0x1>
 218:	89 2b       	or	r24, r25
 21a:	99 f0       	breq	.+38     	; 0x242 <__vector_10+0x44>
		TCCR1B |= (1<<ICES1);	// detect rising edge
 21c:	e1 e8       	ldi	r30, 0x81	; 129
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	80 64       	ori	r24, 0x40	; 64
 224:	80 83       	st	Z, r24
		TIFR1 |= 0x20;			// clears flag
 226:	b5 9a       	sbi	0x16, 5	; 22
		value1 = ICR1;			// stores time 1
 228:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 22c:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 230:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <value1+0x1>
 234:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <value1>
		flag = 0;
 238:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <flag+0x1>
 23c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <flag>
 240:	14 c0       	rjmp	.+40     	; 0x26a <__vector_10+0x6c>
	}
	else{
		TCCR1B &= ~(1<<ICES1);	// detect falling edge
 242:	e1 e8       	ldi	r30, 0x81	; 129
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	8f 7b       	andi	r24, 0xBF	; 191
 24a:	80 83       	st	Z, r24
		TIFR1 |= 0x20;			// clears flag
 24c:	b5 9a       	sbi	0x16, 5	; 22
		value2 = ICR1;			// stores time 2
 24e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 252:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 256:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <value2+0x1>
 25a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <value2>
		flag = 1;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <flag+0x1>
 266:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <flag>
	}
}
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <__vector_13>:

ISR(TIMER1_OVF_vect){
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
	overflow++;					//count overflow
 28a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <overflow>
 28e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <overflow+0x1>
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <overflow+0x1>
 298:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <overflow>
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <printf>:
 2aa:	a0 e0       	ldi	r26, 0x00	; 0
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	eb e5       	ldi	r30, 0x5B	; 91
 2b0:	f1 e0       	ldi	r31, 0x01	; 1
 2b2:	0c 94 0c 04 	jmp	0x818	; 0x818 <__prologue_saves__+0x20>
 2b6:	ae 01       	movw	r20, r28
 2b8:	4b 5f       	subi	r20, 0xFB	; 251
 2ba:	5f 4f       	sbci	r21, 0xFF	; 255
 2bc:	fa 01       	movw	r30, r20
 2be:	61 91       	ld	r22, Z+
 2c0:	71 91       	ld	r23, Z+
 2c2:	af 01       	movw	r20, r30
 2c4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__iob+0x2>
 2c8:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__iob+0x3>
 2cc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <vfprintf>
 2d0:	e2 e0       	ldi	r30, 0x02	; 2
 2d2:	0c 94 28 04 	jmp	0x850	; 0x850 <__epilogue_restores__+0x20>

000002d6 <vfprintf>:
 2d6:	ab e0       	ldi	r26, 0x0B	; 11
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	e1 e7       	ldi	r30, 0x71	; 113
 2dc:	f1 e0       	ldi	r31, 0x01	; 1
 2de:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__prologue_saves__>
 2e2:	6c 01       	movw	r12, r24
 2e4:	7b 01       	movw	r14, r22
 2e6:	8a 01       	movw	r16, r20
 2e8:	fc 01       	movw	r30, r24
 2ea:	17 82       	std	Z+7, r1	; 0x07
 2ec:	16 82       	std	Z+6, r1	; 0x06
 2ee:	83 81       	ldd	r24, Z+3	; 0x03
 2f0:	81 ff       	sbrs	r24, 1
 2f2:	cc c1       	rjmp	.+920    	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
 2f4:	ce 01       	movw	r24, r28
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	3c 01       	movw	r6, r24
 2fa:	f6 01       	movw	r30, r12
 2fc:	93 81       	ldd	r25, Z+3	; 0x03
 2fe:	f7 01       	movw	r30, r14
 300:	93 fd       	sbrc	r25, 3
 302:	85 91       	lpm	r24, Z+
 304:	93 ff       	sbrs	r25, 3
 306:	81 91       	ld	r24, Z+
 308:	7f 01       	movw	r14, r30
 30a:	88 23       	and	r24, r24
 30c:	09 f4       	brne	.+2      	; 0x310 <vfprintf+0x3a>
 30e:	ba c1       	rjmp	.+884    	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 310:	85 32       	cpi	r24, 0x25	; 37
 312:	39 f4       	brne	.+14     	; 0x322 <vfprintf+0x4c>
 314:	93 fd       	sbrc	r25, 3
 316:	85 91       	lpm	r24, Z+
 318:	93 ff       	sbrs	r25, 3
 31a:	81 91       	ld	r24, Z+
 31c:	7f 01       	movw	r14, r30
 31e:	85 32       	cpi	r24, 0x25	; 37
 320:	29 f4       	brne	.+10     	; 0x32c <vfprintf+0x56>
 322:	b6 01       	movw	r22, r12
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 62 03 	call	0x6c4	; 0x6c4 <fputc>
 32a:	e7 cf       	rjmp	.-50     	; 0x2fa <vfprintf+0x24>
 32c:	91 2c       	mov	r9, r1
 32e:	21 2c       	mov	r2, r1
 330:	31 2c       	mov	r3, r1
 332:	ff e1       	ldi	r31, 0x1F	; 31
 334:	f3 15       	cp	r31, r3
 336:	d8 f0       	brcs	.+54     	; 0x36e <vfprintf+0x98>
 338:	8b 32       	cpi	r24, 0x2B	; 43
 33a:	79 f0       	breq	.+30     	; 0x35a <vfprintf+0x84>
 33c:	38 f4       	brcc	.+14     	; 0x34c <vfprintf+0x76>
 33e:	80 32       	cpi	r24, 0x20	; 32
 340:	79 f0       	breq	.+30     	; 0x360 <vfprintf+0x8a>
 342:	83 32       	cpi	r24, 0x23	; 35
 344:	a1 f4       	brne	.+40     	; 0x36e <vfprintf+0x98>
 346:	23 2d       	mov	r18, r3
 348:	20 61       	ori	r18, 0x10	; 16
 34a:	1d c0       	rjmp	.+58     	; 0x386 <vfprintf+0xb0>
 34c:	8d 32       	cpi	r24, 0x2D	; 45
 34e:	61 f0       	breq	.+24     	; 0x368 <vfprintf+0x92>
 350:	80 33       	cpi	r24, 0x30	; 48
 352:	69 f4       	brne	.+26     	; 0x36e <vfprintf+0x98>
 354:	23 2d       	mov	r18, r3
 356:	21 60       	ori	r18, 0x01	; 1
 358:	16 c0       	rjmp	.+44     	; 0x386 <vfprintf+0xb0>
 35a:	83 2d       	mov	r24, r3
 35c:	82 60       	ori	r24, 0x02	; 2
 35e:	38 2e       	mov	r3, r24
 360:	e3 2d       	mov	r30, r3
 362:	e4 60       	ori	r30, 0x04	; 4
 364:	3e 2e       	mov	r3, r30
 366:	2a c0       	rjmp	.+84     	; 0x3bc <vfprintf+0xe6>
 368:	f3 2d       	mov	r31, r3
 36a:	f8 60       	ori	r31, 0x08	; 8
 36c:	1d c0       	rjmp	.+58     	; 0x3a8 <vfprintf+0xd2>
 36e:	37 fc       	sbrc	r3, 7
 370:	2d c0       	rjmp	.+90     	; 0x3cc <vfprintf+0xf6>
 372:	20 ed       	ldi	r18, 0xD0	; 208
 374:	28 0f       	add	r18, r24
 376:	2a 30       	cpi	r18, 0x0A	; 10
 378:	40 f0       	brcs	.+16     	; 0x38a <vfprintf+0xb4>
 37a:	8e 32       	cpi	r24, 0x2E	; 46
 37c:	b9 f4       	brne	.+46     	; 0x3ac <vfprintf+0xd6>
 37e:	36 fc       	sbrc	r3, 6
 380:	81 c1       	rjmp	.+770    	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 382:	23 2d       	mov	r18, r3
 384:	20 64       	ori	r18, 0x40	; 64
 386:	32 2e       	mov	r3, r18
 388:	19 c0       	rjmp	.+50     	; 0x3bc <vfprintf+0xe6>
 38a:	36 fe       	sbrs	r3, 6
 38c:	06 c0       	rjmp	.+12     	; 0x39a <vfprintf+0xc4>
 38e:	8a e0       	ldi	r24, 0x0A	; 10
 390:	98 9e       	mul	r9, r24
 392:	20 0d       	add	r18, r0
 394:	11 24       	eor	r1, r1
 396:	92 2e       	mov	r9, r18
 398:	11 c0       	rjmp	.+34     	; 0x3bc <vfprintf+0xe6>
 39a:	ea e0       	ldi	r30, 0x0A	; 10
 39c:	2e 9e       	mul	r2, r30
 39e:	20 0d       	add	r18, r0
 3a0:	11 24       	eor	r1, r1
 3a2:	22 2e       	mov	r2, r18
 3a4:	f3 2d       	mov	r31, r3
 3a6:	f0 62       	ori	r31, 0x20	; 32
 3a8:	3f 2e       	mov	r3, r31
 3aa:	08 c0       	rjmp	.+16     	; 0x3bc <vfprintf+0xe6>
 3ac:	8c 36       	cpi	r24, 0x6C	; 108
 3ae:	21 f4       	brne	.+8      	; 0x3b8 <vfprintf+0xe2>
 3b0:	83 2d       	mov	r24, r3
 3b2:	80 68       	ori	r24, 0x80	; 128
 3b4:	38 2e       	mov	r3, r24
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <vfprintf+0xe6>
 3b8:	88 36       	cpi	r24, 0x68	; 104
 3ba:	41 f4       	brne	.+16     	; 0x3cc <vfprintf+0xf6>
 3bc:	f7 01       	movw	r30, r14
 3be:	93 fd       	sbrc	r25, 3
 3c0:	85 91       	lpm	r24, Z+
 3c2:	93 ff       	sbrs	r25, 3
 3c4:	81 91       	ld	r24, Z+
 3c6:	7f 01       	movw	r14, r30
 3c8:	81 11       	cpse	r24, r1
 3ca:	b3 cf       	rjmp	.-154    	; 0x332 <vfprintf+0x5c>
 3cc:	98 2f       	mov	r25, r24
 3ce:	9f 7d       	andi	r25, 0xDF	; 223
 3d0:	95 54       	subi	r25, 0x45	; 69
 3d2:	93 30       	cpi	r25, 0x03	; 3
 3d4:	28 f4       	brcc	.+10     	; 0x3e0 <vfprintf+0x10a>
 3d6:	0c 5f       	subi	r16, 0xFC	; 252
 3d8:	1f 4f       	sbci	r17, 0xFF	; 255
 3da:	9f e3       	ldi	r25, 0x3F	; 63
 3dc:	99 83       	std	Y+1, r25	; 0x01
 3de:	0d c0       	rjmp	.+26     	; 0x3fa <vfprintf+0x124>
 3e0:	83 36       	cpi	r24, 0x63	; 99
 3e2:	31 f0       	breq	.+12     	; 0x3f0 <vfprintf+0x11a>
 3e4:	83 37       	cpi	r24, 0x73	; 115
 3e6:	71 f0       	breq	.+28     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3e8:	83 35       	cpi	r24, 0x53	; 83
 3ea:	09 f0       	breq	.+2      	; 0x3ee <vfprintf+0x118>
 3ec:	59 c0       	rjmp	.+178    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 3ee:	21 c0       	rjmp	.+66     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 3f0:	f8 01       	movw	r30, r16
 3f2:	80 81       	ld	r24, Z
 3f4:	89 83       	std	Y+1, r24	; 0x01
 3f6:	0e 5f       	subi	r16, 0xFE	; 254
 3f8:	1f 4f       	sbci	r17, 0xFF	; 255
 3fa:	88 24       	eor	r8, r8
 3fc:	83 94       	inc	r8
 3fe:	91 2c       	mov	r9, r1
 400:	53 01       	movw	r10, r6
 402:	13 c0       	rjmp	.+38     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 404:	28 01       	movw	r4, r16
 406:	f2 e0       	ldi	r31, 0x02	; 2
 408:	4f 0e       	add	r4, r31
 40a:	51 1c       	adc	r5, r1
 40c:	f8 01       	movw	r30, r16
 40e:	a0 80       	ld	r10, Z
 410:	b1 80       	ldd	r11, Z+1	; 0x01
 412:	36 fe       	sbrs	r3, 6
 414:	03 c0       	rjmp	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 416:	69 2d       	mov	r22, r9
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41c:	6f ef       	ldi	r22, 0xFF	; 255
 41e:	7f ef       	ldi	r23, 0xFF	; 255
 420:	c5 01       	movw	r24, r10
 422:	0e 94 57 03 	call	0x6ae	; 0x6ae <strnlen>
 426:	4c 01       	movw	r8, r24
 428:	82 01       	movw	r16, r4
 42a:	f3 2d       	mov	r31, r3
 42c:	ff 77       	andi	r31, 0x7F	; 127
 42e:	3f 2e       	mov	r3, r31
 430:	16 c0       	rjmp	.+44     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 432:	28 01       	movw	r4, r16
 434:	22 e0       	ldi	r18, 0x02	; 2
 436:	42 0e       	add	r4, r18
 438:	51 1c       	adc	r5, r1
 43a:	f8 01       	movw	r30, r16
 43c:	a0 80       	ld	r10, Z
 43e:	b1 80       	ldd	r11, Z+1	; 0x01
 440:	36 fe       	sbrs	r3, 6
 442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 444:	69 2d       	mov	r22, r9
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44a:	6f ef       	ldi	r22, 0xFF	; 255
 44c:	7f ef       	ldi	r23, 0xFF	; 255
 44e:	c5 01       	movw	r24, r10
 450:	0e 94 4c 03 	call	0x698	; 0x698 <strnlen_P>
 454:	4c 01       	movw	r8, r24
 456:	f3 2d       	mov	r31, r3
 458:	f0 68       	ori	r31, 0x80	; 128
 45a:	3f 2e       	mov	r3, r31
 45c:	82 01       	movw	r16, r4
 45e:	33 fc       	sbrc	r3, 3
 460:	1b c0       	rjmp	.+54     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 462:	82 2d       	mov	r24, r2
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	88 16       	cp	r8, r24
 468:	99 06       	cpc	r9, r25
 46a:	b0 f4       	brcc	.+44     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 46c:	b6 01       	movw	r22, r12
 46e:	80 e2       	ldi	r24, 0x20	; 32
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 62 03 	call	0x6c4	; 0x6c4 <fputc>
 476:	2a 94       	dec	r2
 478:	f4 cf       	rjmp	.-24     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 47a:	f5 01       	movw	r30, r10
 47c:	37 fc       	sbrc	r3, 7
 47e:	85 91       	lpm	r24, Z+
 480:	37 fe       	sbrs	r3, 7
 482:	81 91       	ld	r24, Z+
 484:	5f 01       	movw	r10, r30
 486:	b6 01       	movw	r22, r12
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <fputc>
 48e:	21 10       	cpse	r2, r1
 490:	2a 94       	dec	r2
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	82 1a       	sub	r8, r18
 496:	91 08       	sbc	r9, r1
 498:	81 14       	cp	r8, r1
 49a:	91 04       	cpc	r9, r1
 49c:	71 f7       	brne	.-36     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 49e:	e8 c0       	rjmp	.+464    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 4a0:	84 36       	cpi	r24, 0x64	; 100
 4a2:	11 f0       	breq	.+4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a4:	89 36       	cpi	r24, 0x69	; 105
 4a6:	41 f5       	brne	.+80     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4a8:	f8 01       	movw	r30, r16
 4aa:	37 fe       	sbrs	r3, 7
 4ac:	07 c0       	rjmp	.+14     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4ae:	60 81       	ld	r22, Z
 4b0:	71 81       	ldd	r23, Z+1	; 0x01
 4b2:	82 81       	ldd	r24, Z+2	; 0x02
 4b4:	93 81       	ldd	r25, Z+3	; 0x03
 4b6:	0c 5f       	subi	r16, 0xFC	; 252
 4b8:	1f 4f       	sbci	r17, 0xFF	; 255
 4ba:	08 c0       	rjmp	.+16     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4bc:	60 81       	ld	r22, Z
 4be:	71 81       	ldd	r23, Z+1	; 0x01
 4c0:	07 2e       	mov	r0, r23
 4c2:	00 0c       	add	r0, r0
 4c4:	88 0b       	sbc	r24, r24
 4c6:	99 0b       	sbc	r25, r25
 4c8:	0e 5f       	subi	r16, 0xFE	; 254
 4ca:	1f 4f       	sbci	r17, 0xFF	; 255
 4cc:	f3 2d       	mov	r31, r3
 4ce:	ff 76       	andi	r31, 0x6F	; 111
 4d0:	3f 2e       	mov	r3, r31
 4d2:	97 ff       	sbrs	r25, 7
 4d4:	09 c0       	rjmp	.+18     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4d6:	90 95       	com	r25
 4d8:	80 95       	com	r24
 4da:	70 95       	com	r23
 4dc:	61 95       	neg	r22
 4de:	7f 4f       	sbci	r23, 0xFF	; 255
 4e0:	8f 4f       	sbci	r24, 0xFF	; 255
 4e2:	9f 4f       	sbci	r25, 0xFF	; 255
 4e4:	f0 68       	ori	r31, 0x80	; 128
 4e6:	3f 2e       	mov	r3, r31
 4e8:	2a e0       	ldi	r18, 0x0A	; 10
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	a3 01       	movw	r20, r6
 4ee:	0e 94 9e 03 	call	0x73c	; 0x73c <__ultoa_invert>
 4f2:	88 2e       	mov	r8, r24
 4f4:	86 18       	sub	r8, r6
 4f6:	45 c0       	rjmp	.+138    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 4f8:	85 37       	cpi	r24, 0x75	; 117
 4fa:	31 f4       	brne	.+12     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 4fc:	23 2d       	mov	r18, r3
 4fe:	2f 7e       	andi	r18, 0xEF	; 239
 500:	b2 2e       	mov	r11, r18
 502:	2a e0       	ldi	r18, 0x0A	; 10
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	25 c0       	rjmp	.+74     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 508:	93 2d       	mov	r25, r3
 50a:	99 7f       	andi	r25, 0xF9	; 249
 50c:	b9 2e       	mov	r11, r25
 50e:	8f 36       	cpi	r24, 0x6F	; 111
 510:	c1 f0       	breq	.+48     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 512:	18 f4       	brcc	.+6      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 514:	88 35       	cpi	r24, 0x58	; 88
 516:	79 f0       	breq	.+30     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 518:	b5 c0       	rjmp	.+362    	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 51a:	80 37       	cpi	r24, 0x70	; 112
 51c:	19 f0       	breq	.+6      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 51e:	88 37       	cpi	r24, 0x78	; 120
 520:	21 f0       	breq	.+8      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 522:	b0 c0       	rjmp	.+352    	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 524:	e9 2f       	mov	r30, r25
 526:	e0 61       	ori	r30, 0x10	; 16
 528:	be 2e       	mov	r11, r30
 52a:	b4 fe       	sbrs	r11, 4
 52c:	0d c0       	rjmp	.+26     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 52e:	fb 2d       	mov	r31, r11
 530:	f4 60       	ori	r31, 0x04	; 4
 532:	bf 2e       	mov	r11, r31
 534:	09 c0       	rjmp	.+18     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 536:	34 fe       	sbrs	r3, 4
 538:	0a c0       	rjmp	.+20     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 53a:	29 2f       	mov	r18, r25
 53c:	26 60       	ori	r18, 0x06	; 6
 53e:	b2 2e       	mov	r11, r18
 540:	06 c0       	rjmp	.+12     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 542:	28 e0       	ldi	r18, 0x08	; 8
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	05 c0       	rjmp	.+10     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 548:	20 e1       	ldi	r18, 0x10	; 16
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	02 c0       	rjmp	.+4      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 54e:	20 e1       	ldi	r18, 0x10	; 16
 550:	32 e0       	ldi	r19, 0x02	; 2
 552:	f8 01       	movw	r30, r16
 554:	b7 fe       	sbrs	r11, 7
 556:	07 c0       	rjmp	.+14     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 558:	60 81       	ld	r22, Z
 55a:	71 81       	ldd	r23, Z+1	; 0x01
 55c:	82 81       	ldd	r24, Z+2	; 0x02
 55e:	93 81       	ldd	r25, Z+3	; 0x03
 560:	0c 5f       	subi	r16, 0xFC	; 252
 562:	1f 4f       	sbci	r17, 0xFF	; 255
 564:	06 c0       	rjmp	.+12     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 566:	60 81       	ld	r22, Z
 568:	71 81       	ldd	r23, Z+1	; 0x01
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 5f       	subi	r16, 0xFE	; 254
 570:	1f 4f       	sbci	r17, 0xFF	; 255
 572:	a3 01       	movw	r20, r6
 574:	0e 94 9e 03 	call	0x73c	; 0x73c <__ultoa_invert>
 578:	88 2e       	mov	r8, r24
 57a:	86 18       	sub	r8, r6
 57c:	fb 2d       	mov	r31, r11
 57e:	ff 77       	andi	r31, 0x7F	; 127
 580:	3f 2e       	mov	r3, r31
 582:	36 fe       	sbrs	r3, 6
 584:	0d c0       	rjmp	.+26     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 586:	23 2d       	mov	r18, r3
 588:	2e 7f       	andi	r18, 0xFE	; 254
 58a:	a2 2e       	mov	r10, r18
 58c:	89 14       	cp	r8, r9
 58e:	58 f4       	brcc	.+22     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 590:	34 fe       	sbrs	r3, 4
 592:	0b c0       	rjmp	.+22     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 594:	32 fc       	sbrc	r3, 2
 596:	09 c0       	rjmp	.+18     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 598:	83 2d       	mov	r24, r3
 59a:	8e 7e       	andi	r24, 0xEE	; 238
 59c:	a8 2e       	mov	r10, r24
 59e:	05 c0       	rjmp	.+10     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 5a0:	b8 2c       	mov	r11, r8
 5a2:	a3 2c       	mov	r10, r3
 5a4:	03 c0       	rjmp	.+6      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 5a6:	b8 2c       	mov	r11, r8
 5a8:	01 c0       	rjmp	.+2      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 5aa:	b9 2c       	mov	r11, r9
 5ac:	a4 fe       	sbrs	r10, 4
 5ae:	0f c0       	rjmp	.+30     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5b0:	fe 01       	movw	r30, r28
 5b2:	e8 0d       	add	r30, r8
 5b4:	f1 1d       	adc	r31, r1
 5b6:	80 81       	ld	r24, Z
 5b8:	80 33       	cpi	r24, 0x30	; 48
 5ba:	21 f4       	brne	.+8      	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 5bc:	9a 2d       	mov	r25, r10
 5be:	99 7e       	andi	r25, 0xE9	; 233
 5c0:	a9 2e       	mov	r10, r25
 5c2:	09 c0       	rjmp	.+18     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5c4:	a2 fe       	sbrs	r10, 2
 5c6:	06 c0       	rjmp	.+12     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5c8:	b3 94       	inc	r11
 5ca:	b3 94       	inc	r11
 5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5ce:	8a 2d       	mov	r24, r10
 5d0:	86 78       	andi	r24, 0x86	; 134
 5d2:	09 f0       	breq	.+2      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5d4:	b3 94       	inc	r11
 5d6:	a3 fc       	sbrc	r10, 3
 5d8:	11 c0       	rjmp	.+34     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5da:	a0 fe       	sbrs	r10, 0
 5dc:	06 c0       	rjmp	.+12     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5de:	b2 14       	cp	r11, r2
 5e0:	88 f4       	brcc	.+34     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5e2:	28 0c       	add	r2, r8
 5e4:	92 2c       	mov	r9, r2
 5e6:	9b 18       	sub	r9, r11
 5e8:	0e c0       	rjmp	.+28     	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 5ea:	b2 14       	cp	r11, r2
 5ec:	60 f4       	brcc	.+24     	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 5ee:	b6 01       	movw	r22, r12
 5f0:	80 e2       	ldi	r24, 0x20	; 32
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <fputc>
 5f8:	b3 94       	inc	r11
 5fa:	f7 cf       	rjmp	.-18     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5fc:	b2 14       	cp	r11, r2
 5fe:	18 f4       	brcc	.+6      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 600:	2b 18       	sub	r2, r11
 602:	02 c0       	rjmp	.+4      	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 604:	98 2c       	mov	r9, r8
 606:	21 2c       	mov	r2, r1
 608:	a4 fe       	sbrs	r10, 4
 60a:	10 c0       	rjmp	.+32     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 60c:	b6 01       	movw	r22, r12
 60e:	80 e3       	ldi	r24, 0x30	; 48
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 62 03 	call	0x6c4	; 0x6c4 <fputc>
 616:	a2 fe       	sbrs	r10, 2
 618:	17 c0       	rjmp	.+46     	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 61a:	a1 fc       	sbrc	r10, 1
 61c:	03 c0       	rjmp	.+6      	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
 61e:	88 e7       	ldi	r24, 0x78	; 120
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 624:	88 e5       	ldi	r24, 0x58	; 88
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	b6 01       	movw	r22, r12
 62a:	0c c0       	rjmp	.+24     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 62c:	8a 2d       	mov	r24, r10
 62e:	86 78       	andi	r24, 0x86	; 134
 630:	59 f0       	breq	.+22     	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 632:	a1 fe       	sbrs	r10, 1
 634:	02 c0       	rjmp	.+4      	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 636:	8b e2       	ldi	r24, 0x2B	; 43
 638:	01 c0       	rjmp	.+2      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 63a:	80 e2       	ldi	r24, 0x20	; 32
 63c:	a7 fc       	sbrc	r10, 7
 63e:	8d e2       	ldi	r24, 0x2D	; 45
 640:	b6 01       	movw	r22, r12
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 62 03 	call	0x6c4	; 0x6c4 <fputc>
 648:	89 14       	cp	r8, r9
 64a:	38 f4       	brcc	.+14     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 64c:	b6 01       	movw	r22, r12
 64e:	80 e3       	ldi	r24, 0x30	; 48
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 62 03 	call	0x6c4	; 0x6c4 <fputc>
 656:	9a 94       	dec	r9
 658:	f7 cf       	rjmp	.-18     	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 65a:	8a 94       	dec	r8
 65c:	f3 01       	movw	r30, r6
 65e:	e8 0d       	add	r30, r8
 660:	f1 1d       	adc	r31, r1
 662:	80 81       	ld	r24, Z
 664:	b6 01       	movw	r22, r12
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 62 03 	call	0x6c4	; 0x6c4 <fputc>
 66c:	81 10       	cpse	r8, r1
 66e:	f5 cf       	rjmp	.-22     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 670:	22 20       	and	r2, r2
 672:	09 f4       	brne	.+2      	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
 674:	42 ce       	rjmp	.-892    	; 0x2fa <vfprintf+0x24>
 676:	b6 01       	movw	r22, r12
 678:	80 e2       	ldi	r24, 0x20	; 32
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <fputc>
 680:	2a 94       	dec	r2
 682:	f6 cf       	rjmp	.-20     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 684:	f6 01       	movw	r30, r12
 686:	86 81       	ldd	r24, Z+6	; 0x06
 688:	97 81       	ldd	r25, Z+7	; 0x07
 68a:	02 c0       	rjmp	.+4      	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 68c:	8f ef       	ldi	r24, 0xFF	; 255
 68e:	9f ef       	ldi	r25, 0xFF	; 255
 690:	2b 96       	adiw	r28, 0x0b	; 11
 692:	e2 e1       	ldi	r30, 0x12	; 18
 694:	0c 94 18 04 	jmp	0x830	; 0x830 <__epilogue_restores__>

00000698 <strnlen_P>:
 698:	fc 01       	movw	r30, r24
 69a:	05 90       	lpm	r0, Z+
 69c:	61 50       	subi	r22, 0x01	; 1
 69e:	70 40       	sbci	r23, 0x00	; 0
 6a0:	01 10       	cpse	r0, r1
 6a2:	d8 f7       	brcc	.-10     	; 0x69a <strnlen_P+0x2>
 6a4:	80 95       	com	r24
 6a6:	90 95       	com	r25
 6a8:	8e 0f       	add	r24, r30
 6aa:	9f 1f       	adc	r25, r31
 6ac:	08 95       	ret

000006ae <strnlen>:
 6ae:	fc 01       	movw	r30, r24
 6b0:	61 50       	subi	r22, 0x01	; 1
 6b2:	70 40       	sbci	r23, 0x00	; 0
 6b4:	01 90       	ld	r0, Z+
 6b6:	01 10       	cpse	r0, r1
 6b8:	d8 f7       	brcc	.-10     	; 0x6b0 <strnlen+0x2>
 6ba:	80 95       	com	r24
 6bc:	90 95       	com	r25
 6be:	8e 0f       	add	r24, r30
 6c0:	9f 1f       	adc	r25, r31
 6c2:	08 95       	ret

000006c4 <fputc>:
 6c4:	0f 93       	push	r16
 6c6:	1f 93       	push	r17
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	fb 01       	movw	r30, r22
 6ce:	23 81       	ldd	r18, Z+3	; 0x03
 6d0:	21 fd       	sbrc	r18, 1
 6d2:	03 c0       	rjmp	.+6      	; 0x6da <fputc+0x16>
 6d4:	8f ef       	ldi	r24, 0xFF	; 255
 6d6:	9f ef       	ldi	r25, 0xFF	; 255
 6d8:	2c c0       	rjmp	.+88     	; 0x732 <fputc+0x6e>
 6da:	22 ff       	sbrs	r18, 2
 6dc:	16 c0       	rjmp	.+44     	; 0x70a <fputc+0x46>
 6de:	46 81       	ldd	r20, Z+6	; 0x06
 6e0:	57 81       	ldd	r21, Z+7	; 0x07
 6e2:	24 81       	ldd	r18, Z+4	; 0x04
 6e4:	35 81       	ldd	r19, Z+5	; 0x05
 6e6:	42 17       	cp	r20, r18
 6e8:	53 07       	cpc	r21, r19
 6ea:	44 f4       	brge	.+16     	; 0x6fc <fputc+0x38>
 6ec:	a0 81       	ld	r26, Z
 6ee:	b1 81       	ldd	r27, Z+1	; 0x01
 6f0:	9d 01       	movw	r18, r26
 6f2:	2f 5f       	subi	r18, 0xFF	; 255
 6f4:	3f 4f       	sbci	r19, 0xFF	; 255
 6f6:	31 83       	std	Z+1, r19	; 0x01
 6f8:	20 83       	st	Z, r18
 6fa:	8c 93       	st	X, r24
 6fc:	26 81       	ldd	r18, Z+6	; 0x06
 6fe:	37 81       	ldd	r19, Z+7	; 0x07
 700:	2f 5f       	subi	r18, 0xFF	; 255
 702:	3f 4f       	sbci	r19, 0xFF	; 255
 704:	37 83       	std	Z+7, r19	; 0x07
 706:	26 83       	std	Z+6, r18	; 0x06
 708:	14 c0       	rjmp	.+40     	; 0x732 <fputc+0x6e>
 70a:	8b 01       	movw	r16, r22
 70c:	ec 01       	movw	r28, r24
 70e:	fb 01       	movw	r30, r22
 710:	00 84       	ldd	r0, Z+8	; 0x08
 712:	f1 85       	ldd	r31, Z+9	; 0x09
 714:	e0 2d       	mov	r30, r0
 716:	09 95       	icall
 718:	89 2b       	or	r24, r25
 71a:	e1 f6       	brne	.-72     	; 0x6d4 <fputc+0x10>
 71c:	d8 01       	movw	r26, r16
 71e:	16 96       	adiw	r26, 0x06	; 6
 720:	8d 91       	ld	r24, X+
 722:	9c 91       	ld	r25, X
 724:	17 97       	sbiw	r26, 0x07	; 7
 726:	01 96       	adiw	r24, 0x01	; 1
 728:	17 96       	adiw	r26, 0x07	; 7
 72a:	9c 93       	st	X, r25
 72c:	8e 93       	st	-X, r24
 72e:	16 97       	sbiw	r26, 0x06	; 6
 730:	ce 01       	movw	r24, r28
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	1f 91       	pop	r17
 738:	0f 91       	pop	r16
 73a:	08 95       	ret

0000073c <__ultoa_invert>:
 73c:	fa 01       	movw	r30, r20
 73e:	aa 27       	eor	r26, r26
 740:	28 30       	cpi	r18, 0x08	; 8
 742:	51 f1       	breq	.+84     	; 0x798 <__ultoa_invert+0x5c>
 744:	20 31       	cpi	r18, 0x10	; 16
 746:	81 f1       	breq	.+96     	; 0x7a8 <__ultoa_invert+0x6c>
 748:	e8 94       	clt
 74a:	6f 93       	push	r22
 74c:	6e 7f       	andi	r22, 0xFE	; 254
 74e:	6e 5f       	subi	r22, 0xFE	; 254
 750:	7f 4f       	sbci	r23, 0xFF	; 255
 752:	8f 4f       	sbci	r24, 0xFF	; 255
 754:	9f 4f       	sbci	r25, 0xFF	; 255
 756:	af 4f       	sbci	r26, 0xFF	; 255
 758:	b1 e0       	ldi	r27, 0x01	; 1
 75a:	3e d0       	rcall	.+124    	; 0x7d8 <__ultoa_invert+0x9c>
 75c:	b4 e0       	ldi	r27, 0x04	; 4
 75e:	3c d0       	rcall	.+120    	; 0x7d8 <__ultoa_invert+0x9c>
 760:	67 0f       	add	r22, r23
 762:	78 1f       	adc	r23, r24
 764:	89 1f       	adc	r24, r25
 766:	9a 1f       	adc	r25, r26
 768:	a1 1d       	adc	r26, r1
 76a:	68 0f       	add	r22, r24
 76c:	79 1f       	adc	r23, r25
 76e:	8a 1f       	adc	r24, r26
 770:	91 1d       	adc	r25, r1
 772:	a1 1d       	adc	r26, r1
 774:	6a 0f       	add	r22, r26
 776:	71 1d       	adc	r23, r1
 778:	81 1d       	adc	r24, r1
 77a:	91 1d       	adc	r25, r1
 77c:	a1 1d       	adc	r26, r1
 77e:	20 d0       	rcall	.+64     	; 0x7c0 <__ultoa_invert+0x84>
 780:	09 f4       	brne	.+2      	; 0x784 <__ultoa_invert+0x48>
 782:	68 94       	set
 784:	3f 91       	pop	r19
 786:	2a e0       	ldi	r18, 0x0A	; 10
 788:	26 9f       	mul	r18, r22
 78a:	11 24       	eor	r1, r1
 78c:	30 19       	sub	r19, r0
 78e:	30 5d       	subi	r19, 0xD0	; 208
 790:	31 93       	st	Z+, r19
 792:	de f6       	brtc	.-74     	; 0x74a <__ultoa_invert+0xe>
 794:	cf 01       	movw	r24, r30
 796:	08 95       	ret
 798:	46 2f       	mov	r20, r22
 79a:	47 70       	andi	r20, 0x07	; 7
 79c:	40 5d       	subi	r20, 0xD0	; 208
 79e:	41 93       	st	Z+, r20
 7a0:	b3 e0       	ldi	r27, 0x03	; 3
 7a2:	0f d0       	rcall	.+30     	; 0x7c2 <__ultoa_invert+0x86>
 7a4:	c9 f7       	brne	.-14     	; 0x798 <__ultoa_invert+0x5c>
 7a6:	f6 cf       	rjmp	.-20     	; 0x794 <__ultoa_invert+0x58>
 7a8:	46 2f       	mov	r20, r22
 7aa:	4f 70       	andi	r20, 0x0F	; 15
 7ac:	40 5d       	subi	r20, 0xD0	; 208
 7ae:	4a 33       	cpi	r20, 0x3A	; 58
 7b0:	18 f0       	brcs	.+6      	; 0x7b8 <__ultoa_invert+0x7c>
 7b2:	49 5d       	subi	r20, 0xD9	; 217
 7b4:	31 fd       	sbrc	r19, 1
 7b6:	40 52       	subi	r20, 0x20	; 32
 7b8:	41 93       	st	Z+, r20
 7ba:	02 d0       	rcall	.+4      	; 0x7c0 <__ultoa_invert+0x84>
 7bc:	a9 f7       	brne	.-22     	; 0x7a8 <__ultoa_invert+0x6c>
 7be:	ea cf       	rjmp	.-44     	; 0x794 <__ultoa_invert+0x58>
 7c0:	b4 e0       	ldi	r27, 0x04	; 4
 7c2:	a6 95       	lsr	r26
 7c4:	97 95       	ror	r25
 7c6:	87 95       	ror	r24
 7c8:	77 95       	ror	r23
 7ca:	67 95       	ror	r22
 7cc:	ba 95       	dec	r27
 7ce:	c9 f7       	brne	.-14     	; 0x7c2 <__ultoa_invert+0x86>
 7d0:	00 97       	sbiw	r24, 0x00	; 0
 7d2:	61 05       	cpc	r22, r1
 7d4:	71 05       	cpc	r23, r1
 7d6:	08 95       	ret
 7d8:	9b 01       	movw	r18, r22
 7da:	ac 01       	movw	r20, r24
 7dc:	0a 2e       	mov	r0, r26
 7de:	06 94       	lsr	r0
 7e0:	57 95       	ror	r21
 7e2:	47 95       	ror	r20
 7e4:	37 95       	ror	r19
 7e6:	27 95       	ror	r18
 7e8:	ba 95       	dec	r27
 7ea:	c9 f7       	brne	.-14     	; 0x7de <__ultoa_invert+0xa2>
 7ec:	62 0f       	add	r22, r18
 7ee:	73 1f       	adc	r23, r19
 7f0:	84 1f       	adc	r24, r20
 7f2:	95 1f       	adc	r25, r21
 7f4:	a0 1d       	adc	r26, r0
 7f6:	08 95       	ret

000007f8 <__prologue_saves__>:
 7f8:	2f 92       	push	r2
 7fa:	3f 92       	push	r3
 7fc:	4f 92       	push	r4
 7fe:	5f 92       	push	r5
 800:	6f 92       	push	r6
 802:	7f 92       	push	r7
 804:	8f 92       	push	r8
 806:	9f 92       	push	r9
 808:	af 92       	push	r10
 80a:	bf 92       	push	r11
 80c:	cf 92       	push	r12
 80e:	df 92       	push	r13
 810:	ef 92       	push	r14
 812:	ff 92       	push	r15
 814:	0f 93       	push	r16
 816:	1f 93       	push	r17
 818:	cf 93       	push	r28
 81a:	df 93       	push	r29
 81c:	cd b7       	in	r28, 0x3d	; 61
 81e:	de b7       	in	r29, 0x3e	; 62
 820:	ca 1b       	sub	r28, r26
 822:	db 0b       	sbc	r29, r27
 824:	0f b6       	in	r0, 0x3f	; 63
 826:	f8 94       	cli
 828:	de bf       	out	0x3e, r29	; 62
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	cd bf       	out	0x3d, r28	; 61
 82e:	09 94       	ijmp

00000830 <__epilogue_restores__>:
 830:	2a 88       	ldd	r2, Y+18	; 0x12
 832:	39 88       	ldd	r3, Y+17	; 0x11
 834:	48 88       	ldd	r4, Y+16	; 0x10
 836:	5f 84       	ldd	r5, Y+15	; 0x0f
 838:	6e 84       	ldd	r6, Y+14	; 0x0e
 83a:	7d 84       	ldd	r7, Y+13	; 0x0d
 83c:	8c 84       	ldd	r8, Y+12	; 0x0c
 83e:	9b 84       	ldd	r9, Y+11	; 0x0b
 840:	aa 84       	ldd	r10, Y+10	; 0x0a
 842:	b9 84       	ldd	r11, Y+9	; 0x09
 844:	c8 84       	ldd	r12, Y+8	; 0x08
 846:	df 80       	ldd	r13, Y+7	; 0x07
 848:	ee 80       	ldd	r14, Y+6	; 0x06
 84a:	fd 80       	ldd	r15, Y+5	; 0x05
 84c:	0c 81       	ldd	r16, Y+4	; 0x04
 84e:	1b 81       	ldd	r17, Y+3	; 0x03
 850:	aa 81       	ldd	r26, Y+2	; 0x02
 852:	b9 81       	ldd	r27, Y+1	; 0x01
 854:	ce 0f       	add	r28, r30
 856:	d1 1d       	adc	r29, r1
 858:	0f b6       	in	r0, 0x3f	; 63
 85a:	f8 94       	cli
 85c:	de bf       	out	0x3e, r29	; 62
 85e:	0f be       	out	0x3f, r0	; 63
 860:	cd bf       	out	0x3d, r28	; 61
 862:	ed 01       	movw	r28, r26
 864:	08 95       	ret

00000866 <_exit>:
 866:	f8 94       	cli

00000868 <__stop_program>:
 868:	ff cf       	rjmp	.-2      	; 0x868 <__stop_program>
