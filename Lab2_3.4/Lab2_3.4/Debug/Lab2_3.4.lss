
Lab2_3.4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000660  000006f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000660  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080011c  0080011c  00000710  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000740  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000951  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000776  00000000  00000000  00001131  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046b  00000000  00000000  000018a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000434  00000000  00000000  00001e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000217  00000000  00000000  0000226c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002483  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_13>
  38:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b2 01 	call	0x364	; 0x364 <main>
  9e:	0c 94 2e 03 	jmp	0x65c	; 0x65c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:
void uart_init(void);

static FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
static FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

int uart_putchar(char c, FILE *stream) {
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
	if (c == '\n') {
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <uart_putchar+0xe>
		uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	85 ff       	sbrs	r24, 5
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <uart_putchar+0x12>
	UDR0 = c;
  be:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <uart_getchar>:

int uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
  ca:	e0 ec       	ldi	r30, 0xC0	; 192
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	ec f7       	brge	.-6      	; 0xce <uart_getchar+0x4>
	return UDR0;
  d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	08 95       	ret

000000dc <uart_init>:

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
  dc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
  e0:	87 e6       	ldi	r24, 0x67	; 103
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
  e6:	e0 ec       	ldi	r30, 0xC0	; 192
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	8d 7f       	andi	r24, 0xFD	; 253
  ee:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    // Redirect stdin and stdout so functions like printf and getchar work.
	stdout = &uart_output;
  fc:	e8 e2       	ldi	r30, 0x28	; 40
  fe:	f1 e0       	ldi	r31, 0x01	; 1
 100:	8e e0       	ldi	r24, 0x0E	; 14
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	93 83       	std	Z+3, r25	; 0x03
 106:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	91 83       	std	Z+1, r25	; 0x01
 10e:	80 83       	st	Z, r24
 110:	08 95       	ret

00000112 <output_length>:
	
}

void output_length(void){
	
	if (value2 < value1){overflow--;} // get rid of extra flow count if value2 < value1 
 112:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <value2>
 116:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <value2+0x1>
 11a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <value1>
 11e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <value1+0x1>
 122:	28 17       	cp	r18, r24
 124:	39 07       	cpc	r19, r25
 126:	48 f4       	brcc	.+18     	; 0x13a <output_length+0x28>
 128:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <overflow>
 12c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <overflow+0x1>
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <overflow+0x1>
 136:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <overflow>
	
	diff = value2 - value1;
 13a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <value2>
 13e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <value2+0x1>
 142:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <value1>
 146:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <value1+0x1>
 14a:	82 1b       	sub	r24, r18
 14c:	93 0b       	sbc	r25, r19
 14e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <diff+0x1>
 152:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <diff>
	
	pulse_width = (int)overflow * 65536u + (int)diff;
 156:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <overflow>
 15a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <overflow+0x1>
 15e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <diff>
 162:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <diff+0x1>
 166:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 16a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
 16e:	08 95       	ret

00000170 <__vector_10>:
	}
	*/
	
}

ISR(TIMER1_CAPT_vect){
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
	if (flag){
 182:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <flag>
 186:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <flag+0x1>
 18a:	89 2b       	or	r24, r25
 18c:	99 f0       	breq	.+38     	; 0x1b4 <__vector_10+0x44>
		TCCR1B |= (1<<ICES1);	// detect rising edge
 18e:	e1 e8       	ldi	r30, 0x81	; 129
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	80 64       	ori	r24, 0x40	; 64
 196:	80 83       	st	Z, r24
		TIFR1 |= 0x20;			// clears flag
 198:	b5 9a       	sbi	0x16, 5	; 22
		value1 = ICR1;			// stores time 1
 19a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 19e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 1a2:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <value1+0x1>
 1a6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <value1>
		flag = 0;
 1aa:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <flag+0x1>
 1ae:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <flag>
 1b2:	14 c0       	rjmp	.+40     	; 0x1dc <__vector_10+0x6c>
	}
	else{
		TCCR1B &= ~(1<<ICES1);	// detect falling edge
 1b4:	e1 e8       	ldi	r30, 0x81	; 129
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	8f 7b       	andi	r24, 0xBF	; 191
 1bc:	80 83       	st	Z, r24
		TIFR1 |= 0x20;			// clears flag
 1be:	b5 9a       	sbi	0x16, 5	; 22
		value2 = ICR1;			// stores time 2
 1c0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 1c4:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 1c8:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <value2+0x1>
 1cc:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <value2>
		flag = 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <flag+0x1>
 1d8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <flag>
	}
	TIMSK1 &= ~(1<<ICIE1) | (1<<TOIE1);
 1dc:	ef e6       	ldi	r30, 0x6F	; 111
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	8f 7d       	andi	r24, 0xDF	; 223
 1e4:	80 83       	st	Z, r24
}
 1e6:	ff 91       	pop	r31
 1e8:	ef 91       	pop	r30
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__vector_13>:

ISR(TIMER1_OVF_vect){
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	8f 93       	push	r24
 204:	9f 93       	push	r25
	overflow++;					//count overflow
 206:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <overflow>
 20a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <overflow+0x1>
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <overflow+0x1>
 214:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <overflow>
}
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <__vector_14>:


// control the frequency by ping sensor
ISR(TIMER0_COMPA_vect)
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	2f 93       	push	r18
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
 236:	ef 93       	push	r30
 238:	ff 93       	push	r31
	if(pulse_width > - 1187){
 23a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 23e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 242:	8e 35       	cpi	r24, 0x5E	; 94
 244:	9b 4f       	sbci	r25, 0xFB	; 251
 246:	18 f0       	brcs	.+6      	; 0x24e <__vector_14+0x28>
		OCR0A = C7;
 248:	8c e3       	ldi	r24, 0x3C	; 60
 24a:	87 bd       	out	0x27, r24	; 39
 24c:	3e c0       	rjmp	.+124    	; 0x2ca <__vector_14+0xa4>
		//printf("C7 ");
	}
	else if(pulse_width > -1874){
 24e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 252:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 256:	8f 3a       	cpi	r24, 0xAF	; 175
 258:	98 4f       	sbci	r25, 0xF8	; 248
 25a:	18 f0       	brcs	.+6      	; 0x262 <__vector_14+0x3c>
		OCR0A = B7;
 25c:	80 e4       	ldi	r24, 0x40	; 64
 25e:	87 bd       	out	0x27, r24	; 39
 260:	34 c0       	rjmp	.+104    	; 0x2ca <__vector_14+0xa4>
		//printf("B7 ");
	}
	else if(pulse_width > -2561){
 262:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 266:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 26a:	81 15       	cp	r24, r1
 26c:	96 4f       	sbci	r25, 0xF6	; 246
 26e:	18 f0       	brcs	.+6      	; 0x276 <__vector_14+0x50>
		OCR0A = A7;
 270:	87 e4       	ldi	r24, 0x47	; 71
 272:	87 bd       	out	0x27, r24	; 39
 274:	2a c0       	rjmp	.+84     	; 0x2ca <__vector_14+0xa4>
		//printf("A7 ");
	}
	else if(pulse_width > -3248){
 276:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 27a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 27e:	81 35       	cpi	r24, 0x51	; 81
 280:	93 4f       	sbci	r25, 0xF3	; 243
 282:	18 f0       	brcs	.+6      	; 0x28a <__vector_14+0x64>
		OCR0A = G6;
 284:	80 e5       	ldi	r24, 0x50	; 80
 286:	87 bd       	out	0x27, r24	; 39
 288:	20 c0       	rjmp	.+64     	; 0x2ca <__vector_14+0xa4>
		//printf("G6 ");
	}
	else if(pulse_width > -3935){
 28a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 28e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 292:	82 3a       	cpi	r24, 0xA2	; 162
 294:	90 4f       	sbci	r25, 0xF0	; 240
 296:	18 f0       	brcs	.+6      	; 0x29e <__vector_14+0x78>
		OCR0A = F6;
 298:	8a e5       	ldi	r24, 0x5A	; 90
 29a:	87 bd       	out	0x27, r24	; 39
 29c:	16 c0       	rjmp	.+44     	; 0x2ca <__vector_14+0xa4>
		//printf("F6 ");
	}
	else if(pulse_width > -4622){
 29e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 2a2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 2a6:	83 3f       	cpi	r24, 0xF3	; 243
 2a8:	9d 4e       	sbci	r25, 0xED	; 237
 2aa:	18 f0       	brcs	.+6      	; 0x2b2 <__vector_14+0x8c>
		OCR0A = E6;
 2ac:	8f e5       	ldi	r24, 0x5F	; 95
 2ae:	87 bd       	out	0x27, r24	; 39
 2b0:	0c c0       	rjmp	.+24     	; 0x2ca <__vector_14+0xa4>
		//printf("E6 ");
	}
	else if(pulse_width > -5309){
 2b2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 2b6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 2ba:	84 34       	cpi	r24, 0x44	; 68
 2bc:	9b 4e       	sbci	r25, 0xEB	; 235
 2be:	18 f0       	brcs	.+6      	; 0x2c6 <__vector_14+0xa0>
		OCR0A = D6;
 2c0:	8b e6       	ldi	r24, 0x6B	; 107
 2c2:	87 bd       	out	0x27, r24	; 39
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <__vector_14+0xa4>
		//printf("D6 ");
	}
	else{
		OCR0A = C6;
 2c6:	88 e7       	ldi	r24, 0x78	; 120
 2c8:	87 bd       	out	0x27, r24	; 39
		//printf("C6 ");
	}
	
	TIMSK0 &= ~(1 << OCIE0A);
 2ca:	ee e6       	ldi	r30, 0x6E	; 110
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	8d 7f       	andi	r24, 0xFD	; 253
 2d2:	80 83       	st	Z, r24
	
	//printf("pulse_width: %d, OCR0A: %d\n",-pulse_width,OCR0A); // print to serial
}
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	2f 91       	pop	r18
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <volume_ctrl>:

// control the volume by light resistor
void volume_ctrl(void){
 2e8:	cf 92       	push	r12
 2ea:	df 92       	push	r13
 2ec:	ef 92       	push	r14
 2ee:	ff 92       	push	r15
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
	//ADC: 350 ~600
	OCR1A = 5; //set 100 Hz
 2f4:	e8 e8       	ldi	r30, 0x88	; 136
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	91 83       	std	Z+1, r25	; 0x01
 2fe:	80 83       	st	Z, r24
	OCR1B = OCR1A / (700.0f/(float)ADC/5.0f);
 300:	60 81       	ld	r22, Z
 302:	71 81       	ldd	r23, Z+1	; 0x01
 304:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 308:	d0 91 79 00 	lds	r29, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 a0 02 	call	0x540	; 0x540 <__floatunsisf>
 314:	6b 01       	movw	r12, r22
 316:	7c 01       	movw	r14, r24
 318:	be 01       	movw	r22, r28
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 a0 02 	call	0x540	; 0x540 <__floatunsisf>
 322:	9b 01       	movw	r18, r22
 324:	ac 01       	movw	r20, r24
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	8f e2       	ldi	r24, 0x2F	; 47
 32c:	94 e4       	ldi	r25, 0x44	; 68
 32e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__divsf3>
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	40 ea       	ldi	r20, 0xA0	; 160
 338:	50 e4       	ldi	r21, 0x40	; 64
 33a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__divsf3>
 33e:	9b 01       	movw	r18, r22
 340:	ac 01       	movw	r20, r24
 342:	c7 01       	movw	r24, r14
 344:	b6 01       	movw	r22, r12
 346:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__divsf3>
 34a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__fixunssfsi>
 34e:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 352:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	df 90       	pop	r13
 360:	cf 90       	pop	r12
 362:	08 95       	ret

00000364 <main>:
#define ADC_min = 300;
float voltage = 0.0f;

int main(void)
{
	uart_init();	// init UART
 364:	0e 94 6e 00 	call	0xdc	; 0xdc <uart_init>
	
	DDRB = 0x00;	// init PORTB to be all inputs
 368:	14 b8       	out	0x04, r1	; 4
	//DDRC = 0xFF;	// init PORTC to be all outputs
	DDRD = 0x40;	// enable PD6 to be output
 36a:	80 e4       	ldi	r24, 0x40	; 64
 36c:	8a b9       	out	0x0a, r24	; 10
		DDRC = 0x0;	// init PORTC to be all inputs
 36e:	17 b8       	out	0x07, r1	; 7
		PORTC &= ~(1 << PORTC0); // set PC0 active high
 370:	40 98       	cbi	0x08, 0	; 8
	TCCR1A = 0x00;	// init High byte to zero
 372:	a0 e8       	ldi	r26, 0x80	; 128
 374:	b0 e0       	ldi	r27, 0x00	; 0
 376:	1c 92       	st	X, r1
	TCCR1B = 0x00;  // init Mid byte to zero
 378:	e1 e8       	ldi	r30, 0x81	; 129
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	10 82       	st	Z, r1
	TCCR1C = 0x00;	// init Low byte to zero
 37e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	
	DDRB  |=  (1<<PORTB1) | (1<<PORTB2);	// enable PB1 to be output channel
 382:	84 b1       	in	r24, 0x04	; 4
 384:	86 60       	ori	r24, 0x06	; 6
 386:	84 b9       	out	0x04, r24	; 4
	PORTD |=  (1<<PORTD6); //enable PD6 to be output channel 
 388:	5e 9a       	sbi	0x0b, 6	; 11
	PORTB |=  (1<<PORTB1);// change PB1 PB2 to high
 38a:	29 9a       	sbi	0x05, 1	; 5

	//TIMSK1 |= (1<<ICIE1) | (1<<TOIE1);  // set overflow interrupt 
	//TCCR1B |= (1<<CS11 ) | (1<<ICES1);	// set clock prescale to 8 and enable rising edge capture
	
	TCNT1 = 0;	// reset Counter 1
 38c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 390:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	TCCR0A |= (1 << COM0A0) | (1 << WGM01); //Toggle OC1A on compare match;CTC mode
 394:	84 b5       	in	r24, 0x24	; 36
 396:	82 64       	ori	r24, 0x42	; 66
 398:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00); // prescaler 64
 39a:	85 b5       	in	r24, 0x25	; 37
 39c:	83 60       	ori	r24, 0x03	; 3
 39e:	85 bd       	out	0x25, r24	; 37

	TCCR1A |= (1 << COM1B1) | (1 << WGM11) | (1 << WGM10);
 3a0:	8c 91       	ld	r24, X
 3a2:	83 62       	ori	r24, 0x23	; 35
 3a4:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS12) | (1 << CS10) | (1 << WGM12);
 3a6:	80 81       	ld	r24, Z
 3a8:	8d 60       	ori	r24, 0x0D	; 13
 3aa:	80 83       	st	Z, r24
		
	ADMUX |= (1 << REFS0); //AVcc refer
 3ac:	ec e7       	ldi	r30, 0x7C	; 124
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	80 64       	ori	r24, 0x40	; 64
 3b4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //turn on ADC
 3b6:	ea e7       	ldi	r30, 0x7A	; 122
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	80 68       	ori	r24, 0x80	; 128
 3be:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //division factor = 128, ADC works in
 3c0:	80 81       	ld	r24, Z
 3c2:	87 60       	ori	r24, 0x07	; 7
 3c4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); //Signal source, in this case is the free-running
 3c6:	80 81       	ld	r24, Z
 3c8:	80 62       	ori	r24, 0x20	; 32
 3ca:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //Start conversation
 3cc:	80 81       	ld	r24, Z
 3ce:	80 64       	ori	r24, 0x40	; 64
 3d0:	80 83       	st	Z, r24
	ADCSRB &= ~((1 << ADTS2)|(1 << ADTS1)|(1 << ADTS0));//ADC in free-running mode
 3d2:	eb e7       	ldi	r30, 0x7B	; 123
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	88 7f       	andi	r24, 0xF8	; 248
 3da:	80 83       	st	Z, r24

	sei();		// enable interrupt
 3dc:	78 94       	sei
	
	
	while (1)
	
	{
		TIMSK1 |= (1<<ICIE1) | (1<<TOIE1);
 3de:	0f e6       	ldi	r16, 0x6F	; 111
 3e0:	10 e0       	ldi	r17, 0x00	; 0
		//PORTB ^= (1<<PORTB1);
		output_length();
		volume_ctrl();
		TIMSK0 |= (1 << OCIE0A);	
 3e2:	ce e6       	ldi	r28, 0x6E	; 110
 3e4:	d0 e0       	ldi	r29, 0x00	; 0
	
	
	while (1)
	
	{
		TIMSK1 |= (1<<ICIE1) | (1<<TOIE1);
 3e6:	f8 01       	movw	r30, r16
 3e8:	80 81       	ld	r24, Z
 3ea:	81 62       	ori	r24, 0x21	; 33
 3ec:	80 83       	st	Z, r24
		//PORTB ^= (1<<PORTB1);
		output_length();
 3ee:	0e 94 89 00 	call	0x112	; 0x112 <output_length>
		volume_ctrl();
 3f2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <volume_ctrl>
		TIMSK0 |= (1 << OCIE0A);	
 3f6:	88 81       	ld	r24, Y
 3f8:	82 60       	ori	r24, 0x02	; 2
 3fa:	88 83       	st	Y, r24
 3fc:	f4 cf       	rjmp	.-24     	; 0x3e6 <main+0x82>

000003fe <__divsf3>:
 3fe:	0e 94 13 02 	call	0x426	; 0x426 <__divsf3x>
 402:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__fp_round>
 406:	0e 94 ed 02 	call	0x5da	; 0x5da <__fp_pscB>
 40a:	58 f0       	brcs	.+22     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 40c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__fp_pscA>
 410:	40 f0       	brcs	.+16     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 412:	29 f4       	brne	.+10     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 414:	5f 3f       	cpi	r21, 0xFF	; 255
 416:	29 f0       	breq	.+10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 418:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__fp_inf>
 41c:	51 11       	cpse	r21, r1
 41e:	0c 94 28 03 	jmp	0x650	; 0x650 <__fp_szero>
 422:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__fp_nan>

00000426 <__divsf3x>:
 426:	0e 94 05 03 	call	0x60a	; 0x60a <__fp_split3>
 42a:	68 f3       	brcs	.-38     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>

0000042c <__divsf3_pse>:
 42c:	99 23       	and	r25, r25
 42e:	b1 f3       	breq	.-20     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 430:	55 23       	and	r21, r21
 432:	91 f3       	breq	.-28     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 434:	95 1b       	sub	r25, r21
 436:	55 0b       	sbc	r21, r21
 438:	bb 27       	eor	r27, r27
 43a:	aa 27       	eor	r26, r26
 43c:	62 17       	cp	r22, r18
 43e:	73 07       	cpc	r23, r19
 440:	84 07       	cpc	r24, r20
 442:	38 f0       	brcs	.+14     	; 0x452 <__divsf3_pse+0x26>
 444:	9f 5f       	subi	r25, 0xFF	; 255
 446:	5f 4f       	sbci	r21, 0xFF	; 255
 448:	22 0f       	add	r18, r18
 44a:	33 1f       	adc	r19, r19
 44c:	44 1f       	adc	r20, r20
 44e:	aa 1f       	adc	r26, r26
 450:	a9 f3       	breq	.-22     	; 0x43c <__divsf3_pse+0x10>
 452:	35 d0       	rcall	.+106    	; 0x4be <__divsf3_pse+0x92>
 454:	0e 2e       	mov	r0, r30
 456:	3a f0       	brmi	.+14     	; 0x466 <__divsf3_pse+0x3a>
 458:	e0 e8       	ldi	r30, 0x80	; 128
 45a:	32 d0       	rcall	.+100    	; 0x4c0 <__divsf3_pse+0x94>
 45c:	91 50       	subi	r25, 0x01	; 1
 45e:	50 40       	sbci	r21, 0x00	; 0
 460:	e6 95       	lsr	r30
 462:	00 1c       	adc	r0, r0
 464:	ca f7       	brpl	.-14     	; 0x458 <__divsf3_pse+0x2c>
 466:	2b d0       	rcall	.+86     	; 0x4be <__divsf3_pse+0x92>
 468:	fe 2f       	mov	r31, r30
 46a:	29 d0       	rcall	.+82     	; 0x4be <__divsf3_pse+0x92>
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	88 1f       	adc	r24, r24
 472:	bb 1f       	adc	r27, r27
 474:	26 17       	cp	r18, r22
 476:	37 07       	cpc	r19, r23
 478:	48 07       	cpc	r20, r24
 47a:	ab 07       	cpc	r26, r27
 47c:	b0 e8       	ldi	r27, 0x80	; 128
 47e:	09 f0       	breq	.+2      	; 0x482 <__divsf3_pse+0x56>
 480:	bb 0b       	sbc	r27, r27
 482:	80 2d       	mov	r24, r0
 484:	bf 01       	movw	r22, r30
 486:	ff 27       	eor	r31, r31
 488:	93 58       	subi	r25, 0x83	; 131
 48a:	5f 4f       	sbci	r21, 0xFF	; 255
 48c:	3a f0       	brmi	.+14     	; 0x49c <__divsf3_pse+0x70>
 48e:	9e 3f       	cpi	r25, 0xFE	; 254
 490:	51 05       	cpc	r21, r1
 492:	78 f0       	brcs	.+30     	; 0x4b2 <__divsf3_pse+0x86>
 494:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__fp_inf>
 498:	0c 94 28 03 	jmp	0x650	; 0x650 <__fp_szero>
 49c:	5f 3f       	cpi	r21, 0xFF	; 255
 49e:	e4 f3       	brlt	.-8      	; 0x498 <__divsf3_pse+0x6c>
 4a0:	98 3e       	cpi	r25, 0xE8	; 232
 4a2:	d4 f3       	brlt	.-12     	; 0x498 <__divsf3_pse+0x6c>
 4a4:	86 95       	lsr	r24
 4a6:	77 95       	ror	r23
 4a8:	67 95       	ror	r22
 4aa:	b7 95       	ror	r27
 4ac:	f7 95       	ror	r31
 4ae:	9f 5f       	subi	r25, 0xFF	; 255
 4b0:	c9 f7       	brne	.-14     	; 0x4a4 <__divsf3_pse+0x78>
 4b2:	88 0f       	add	r24, r24
 4b4:	91 1d       	adc	r25, r1
 4b6:	96 95       	lsr	r25
 4b8:	87 95       	ror	r24
 4ba:	97 f9       	bld	r25, 7
 4bc:	08 95       	ret
 4be:	e1 e0       	ldi	r30, 0x01	; 1
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	88 1f       	adc	r24, r24
 4c6:	bb 1f       	adc	r27, r27
 4c8:	62 17       	cp	r22, r18
 4ca:	73 07       	cpc	r23, r19
 4cc:	84 07       	cpc	r24, r20
 4ce:	ba 07       	cpc	r27, r26
 4d0:	20 f0       	brcs	.+8      	; 0x4da <__divsf3_pse+0xae>
 4d2:	62 1b       	sub	r22, r18
 4d4:	73 0b       	sbc	r23, r19
 4d6:	84 0b       	sbc	r24, r20
 4d8:	ba 0b       	sbc	r27, r26
 4da:	ee 1f       	adc	r30, r30
 4dc:	88 f7       	brcc	.-30     	; 0x4c0 <__divsf3_pse+0x94>
 4de:	e0 95       	com	r30
 4e0:	08 95       	ret

000004e2 <__fixunssfsi>:
 4e2:	0e 94 0d 03 	call	0x61a	; 0x61a <__fp_splitA>
 4e6:	88 f0       	brcs	.+34     	; 0x50a <__fixunssfsi+0x28>
 4e8:	9f 57       	subi	r25, 0x7F	; 127
 4ea:	98 f0       	brcs	.+38     	; 0x512 <__fixunssfsi+0x30>
 4ec:	b9 2f       	mov	r27, r25
 4ee:	99 27       	eor	r25, r25
 4f0:	b7 51       	subi	r27, 0x17	; 23
 4f2:	b0 f0       	brcs	.+44     	; 0x520 <__fixunssfsi+0x3e>
 4f4:	e1 f0       	breq	.+56     	; 0x52e <__fixunssfsi+0x4c>
 4f6:	66 0f       	add	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	88 1f       	adc	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	1a f0       	brmi	.+6      	; 0x506 <__fixunssfsi+0x24>
 500:	ba 95       	dec	r27
 502:	c9 f7       	brne	.-14     	; 0x4f6 <__fixunssfsi+0x14>
 504:	14 c0       	rjmp	.+40     	; 0x52e <__fixunssfsi+0x4c>
 506:	b1 30       	cpi	r27, 0x01	; 1
 508:	91 f0       	breq	.+36     	; 0x52e <__fixunssfsi+0x4c>
 50a:	0e 94 27 03 	call	0x64e	; 0x64e <__fp_zero>
 50e:	b1 e0       	ldi	r27, 0x01	; 1
 510:	08 95       	ret
 512:	0c 94 27 03 	jmp	0x64e	; 0x64e <__fp_zero>
 516:	67 2f       	mov	r22, r23
 518:	78 2f       	mov	r23, r24
 51a:	88 27       	eor	r24, r24
 51c:	b8 5f       	subi	r27, 0xF8	; 248
 51e:	39 f0       	breq	.+14     	; 0x52e <__fixunssfsi+0x4c>
 520:	b9 3f       	cpi	r27, 0xF9	; 249
 522:	cc f3       	brlt	.-14     	; 0x516 <__fixunssfsi+0x34>
 524:	86 95       	lsr	r24
 526:	77 95       	ror	r23
 528:	67 95       	ror	r22
 52a:	b3 95       	inc	r27
 52c:	d9 f7       	brne	.-10     	; 0x524 <__fixunssfsi+0x42>
 52e:	3e f4       	brtc	.+14     	; 0x53e <__fixunssfsi+0x5c>
 530:	90 95       	com	r25
 532:	80 95       	com	r24
 534:	70 95       	com	r23
 536:	61 95       	neg	r22
 538:	7f 4f       	sbci	r23, 0xFF	; 255
 53a:	8f 4f       	sbci	r24, 0xFF	; 255
 53c:	9f 4f       	sbci	r25, 0xFF	; 255
 53e:	08 95       	ret

00000540 <__floatunsisf>:
 540:	e8 94       	clt
 542:	09 c0       	rjmp	.+18     	; 0x556 <__floatsisf+0x12>

00000544 <__floatsisf>:
 544:	97 fb       	bst	r25, 7
 546:	3e f4       	brtc	.+14     	; 0x556 <__floatsisf+0x12>
 548:	90 95       	com	r25
 54a:	80 95       	com	r24
 54c:	70 95       	com	r23
 54e:	61 95       	neg	r22
 550:	7f 4f       	sbci	r23, 0xFF	; 255
 552:	8f 4f       	sbci	r24, 0xFF	; 255
 554:	9f 4f       	sbci	r25, 0xFF	; 255
 556:	99 23       	and	r25, r25
 558:	a9 f0       	breq	.+42     	; 0x584 <__floatsisf+0x40>
 55a:	f9 2f       	mov	r31, r25
 55c:	96 e9       	ldi	r25, 0x96	; 150
 55e:	bb 27       	eor	r27, r27
 560:	93 95       	inc	r25
 562:	f6 95       	lsr	r31
 564:	87 95       	ror	r24
 566:	77 95       	ror	r23
 568:	67 95       	ror	r22
 56a:	b7 95       	ror	r27
 56c:	f1 11       	cpse	r31, r1
 56e:	f8 cf       	rjmp	.-16     	; 0x560 <__floatsisf+0x1c>
 570:	fa f4       	brpl	.+62     	; 0x5b0 <__floatsisf+0x6c>
 572:	bb 0f       	add	r27, r27
 574:	11 f4       	brne	.+4      	; 0x57a <__floatsisf+0x36>
 576:	60 ff       	sbrs	r22, 0
 578:	1b c0       	rjmp	.+54     	; 0x5b0 <__floatsisf+0x6c>
 57a:	6f 5f       	subi	r22, 0xFF	; 255
 57c:	7f 4f       	sbci	r23, 0xFF	; 255
 57e:	8f 4f       	sbci	r24, 0xFF	; 255
 580:	9f 4f       	sbci	r25, 0xFF	; 255
 582:	16 c0       	rjmp	.+44     	; 0x5b0 <__floatsisf+0x6c>
 584:	88 23       	and	r24, r24
 586:	11 f0       	breq	.+4      	; 0x58c <__floatsisf+0x48>
 588:	96 e9       	ldi	r25, 0x96	; 150
 58a:	11 c0       	rjmp	.+34     	; 0x5ae <__floatsisf+0x6a>
 58c:	77 23       	and	r23, r23
 58e:	21 f0       	breq	.+8      	; 0x598 <__floatsisf+0x54>
 590:	9e e8       	ldi	r25, 0x8E	; 142
 592:	87 2f       	mov	r24, r23
 594:	76 2f       	mov	r23, r22
 596:	05 c0       	rjmp	.+10     	; 0x5a2 <__floatsisf+0x5e>
 598:	66 23       	and	r22, r22
 59a:	71 f0       	breq	.+28     	; 0x5b8 <__floatsisf+0x74>
 59c:	96 e8       	ldi	r25, 0x86	; 134
 59e:	86 2f       	mov	r24, r22
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	2a f0       	brmi	.+10     	; 0x5b0 <__floatsisf+0x6c>
 5a6:	9a 95       	dec	r25
 5a8:	66 0f       	add	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	da f7       	brpl	.-10     	; 0x5a6 <__floatsisf+0x62>
 5b0:	88 0f       	add	r24, r24
 5b2:	96 95       	lsr	r25
 5b4:	87 95       	ror	r24
 5b6:	97 f9       	bld	r25, 7
 5b8:	08 95       	ret

000005ba <__fp_inf>:
 5ba:	97 f9       	bld	r25, 7
 5bc:	9f 67       	ori	r25, 0x7F	; 127
 5be:	80 e8       	ldi	r24, 0x80	; 128
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	08 95       	ret

000005c6 <__fp_nan>:
 5c6:	9f ef       	ldi	r25, 0xFF	; 255
 5c8:	80 ec       	ldi	r24, 0xC0	; 192
 5ca:	08 95       	ret

000005cc <__fp_pscA>:
 5cc:	00 24       	eor	r0, r0
 5ce:	0a 94       	dec	r0
 5d0:	16 16       	cp	r1, r22
 5d2:	17 06       	cpc	r1, r23
 5d4:	18 06       	cpc	r1, r24
 5d6:	09 06       	cpc	r0, r25
 5d8:	08 95       	ret

000005da <__fp_pscB>:
 5da:	00 24       	eor	r0, r0
 5dc:	0a 94       	dec	r0
 5de:	12 16       	cp	r1, r18
 5e0:	13 06       	cpc	r1, r19
 5e2:	14 06       	cpc	r1, r20
 5e4:	05 06       	cpc	r0, r21
 5e6:	08 95       	ret

000005e8 <__fp_round>:
 5e8:	09 2e       	mov	r0, r25
 5ea:	03 94       	inc	r0
 5ec:	00 0c       	add	r0, r0
 5ee:	11 f4       	brne	.+4      	; 0x5f4 <__fp_round+0xc>
 5f0:	88 23       	and	r24, r24
 5f2:	52 f0       	brmi	.+20     	; 0x608 <__fp_round+0x20>
 5f4:	bb 0f       	add	r27, r27
 5f6:	40 f4       	brcc	.+16     	; 0x608 <__fp_round+0x20>
 5f8:	bf 2b       	or	r27, r31
 5fa:	11 f4       	brne	.+4      	; 0x600 <__fp_round+0x18>
 5fc:	60 ff       	sbrs	r22, 0
 5fe:	04 c0       	rjmp	.+8      	; 0x608 <__fp_round+0x20>
 600:	6f 5f       	subi	r22, 0xFF	; 255
 602:	7f 4f       	sbci	r23, 0xFF	; 255
 604:	8f 4f       	sbci	r24, 0xFF	; 255
 606:	9f 4f       	sbci	r25, 0xFF	; 255
 608:	08 95       	ret

0000060a <__fp_split3>:
 60a:	57 fd       	sbrc	r21, 7
 60c:	90 58       	subi	r25, 0x80	; 128
 60e:	44 0f       	add	r20, r20
 610:	55 1f       	adc	r21, r21
 612:	59 f0       	breq	.+22     	; 0x62a <__fp_splitA+0x10>
 614:	5f 3f       	cpi	r21, 0xFF	; 255
 616:	71 f0       	breq	.+28     	; 0x634 <__fp_splitA+0x1a>
 618:	47 95       	ror	r20

0000061a <__fp_splitA>:
 61a:	88 0f       	add	r24, r24
 61c:	97 fb       	bst	r25, 7
 61e:	99 1f       	adc	r25, r25
 620:	61 f0       	breq	.+24     	; 0x63a <__fp_splitA+0x20>
 622:	9f 3f       	cpi	r25, 0xFF	; 255
 624:	79 f0       	breq	.+30     	; 0x644 <__fp_splitA+0x2a>
 626:	87 95       	ror	r24
 628:	08 95       	ret
 62a:	12 16       	cp	r1, r18
 62c:	13 06       	cpc	r1, r19
 62e:	14 06       	cpc	r1, r20
 630:	55 1f       	adc	r21, r21
 632:	f2 cf       	rjmp	.-28     	; 0x618 <__fp_split3+0xe>
 634:	46 95       	lsr	r20
 636:	f1 df       	rcall	.-30     	; 0x61a <__fp_splitA>
 638:	08 c0       	rjmp	.+16     	; 0x64a <__fp_splitA+0x30>
 63a:	16 16       	cp	r1, r22
 63c:	17 06       	cpc	r1, r23
 63e:	18 06       	cpc	r1, r24
 640:	99 1f       	adc	r25, r25
 642:	f1 cf       	rjmp	.-30     	; 0x626 <__fp_splitA+0xc>
 644:	86 95       	lsr	r24
 646:	71 05       	cpc	r23, r1
 648:	61 05       	cpc	r22, r1
 64a:	08 94       	sec
 64c:	08 95       	ret

0000064e <__fp_zero>:
 64e:	e8 94       	clt

00000650 <__fp_szero>:
 650:	bb 27       	eor	r27, r27
 652:	66 27       	eor	r22, r22
 654:	77 27       	eor	r23, r23
 656:	cb 01       	movw	r24, r22
 658:	97 f9       	bld	r25, 7
 65a:	08 95       	ret

0000065c <_exit>:
 65c:	f8 94       	cli

0000065e <__stop_program>:
 65e:	ff cf       	rjmp	.-2      	; 0x65e <__stop_program>
